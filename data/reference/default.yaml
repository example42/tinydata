---
# This reference module shows all the possible tinydata settings.
#
# The settings key is looked up by the tp_lookuop function
# It's an hash whose values are looked up in deep merge mode across the hierarchies
# defined in hiera.yaml.
reference::settings:

# If the app needs other apps, installed via tp.
# Key used in tp::install (and tp::install::*)
# Valids values: String, Array, Hash of tp::install resources with (in case of Hash)
# their parameters. v3 and v4 compatible.
# These resources, as every other prerequisites, are installed if tp::auto_prereq is set to true.
# If auto_prereq is set to false, the user is responsible for installing the prerequisites.
  tp_prerequisites: {}

# If to use the upstream repo or not (if defined in tinydata)
  upstream_repo: false

# The name of the package to install. ust be available via the system or the configured repos
# v3 and v4 compatible.
  package_name: 'reference'

# The name of the service to manage
  service_name: 'reference'
  process_name: 'reference'
  process_user: 'root'
  process_group: 'root'
  config_file_path: '/etc/reference/reference.conf'
  config_file_format: yaml
#  validate_cmd: 'reference validate'
  pid_file_path: '/run/reference.pid'
  init_file_path: '/etc/sysconfig/reference.conf'
  log_file_path:
    - '/var/log/reference/reference.log'
  config_dir_path: '/etc/reference'
  log_dir_path:
    - '/var/log/reference'

  info_commandsTOCONFIG:
    list: 'reference list'
  debug_commandsTOCONFIG:
    list: 'reference debug'
  test_commandsTOCONFIG:
    status: 'reference status'
  version_command: 'reference version'
  run_commandsTOCONFIG:
    start:
      command: 'reference start'
      arguments:
        - 'instance':
          default: ''
          description: 'Instance to start'
      options:
        config_file:
          default: 'reference.conf'
          value: String
          description: 'Config file to use'
    restart:
      command: 'reference restart'

# tp 4 settings
  install_method: 'package'
  description: 'reference_packages description'
  docker_image: 'reference/reference'
  website: 'https://reference.com'
  issues: 'https://github.com/reference/reference/issues'
  git_source: 'https://github.com/reference/reference'

  configs:
    main:
      path: '/etc/reference/reference.conf'
    init:
      path: '/etc/sysconfig/reference.conf'
      format: 'inifile'
    systemd:
      path: '/etc/systemd/system/reference.service'
      format: 'inifile_with_stanzas'

  dirs:
    main:
      path: '/etc/reference'
    conf:
      path: '/etc/reference/conf.d'
    log:
      path: /var/log/reference
    home:
      path: /var/lib/reference

  user_configs:
    main:
      path: '$HOME/.reference/reference.conf'

  user_dirs:
    main:
      path: '$HOME/.reference'

  ports:
    main:
      port: 42
      protocol: tcp
    ssl:
      port: 4432
      protocol: tcp

  # Configurations to manage app as a container image
  image:
    # The name of the image to use. Passed to docker pull.
    # Can be a full url like quay.io/argoproj/argocd or just the
    # image name on Docker hub like argoproj/argocd
    # This value has precendence over the docker_image value (v3)
    name: 'reference/reference'

    # The ports to map when starting the container. Different data types are supported:
    # When undefined, the ports are mapped based on the settings.ports.main value, if set
    # When an empty string (''), no ports are mapped (this overrides the undef value)
    # When a string, they are mapped as is (e.g. '8080:8081' becomes '-p 8080:8081')
    # When an integer, it's mapped as is (e.g. 8080 becomes '-p 8080:8080')
    # When an array, it's mapped for each element (e.g. ['8080:8080', '8081:8082'] becomes '-p 8080:8080 -p 8081:8082')
    # When an hash, it's mapped for each key/value pair (e.g. {'8080' => '8080', '8081' => '8082'} becomes '-p 8080:8080 -p 8081:8082')
    ports:
      - 9090:9090

    # The volumes or bind mounts to map when starting the container.
    # If you mount volumes, you have to manage and create them.
    # Bind mounts are based on the host dirs (which you can manage via the tp::conf and tp::dir defines)
    # Different data types are supported:
    # When undefined, the bind mounts are mapped based on the settings.dirs values, if set
    # When an empty string (''), nothing is mounted (this overrides the undef value)
    # When a string, they are mapped as is (e.g. 'myvol2:/app' becomes '-v myvol2:/app')
    # When an array, it's mapped for each element (e.g. ['myvol2:/app', '/etc/app:/etc/app:ro'] becomes '-v myvol2:/app -v /etc/app:/etc/app:ro')
    # When an hash, it's mapped for each key/value pair (e.g. {'myvol2' => '/app', '/etc/app' => '/etc/app:ro'} becomes '-v myvol2:/app -v /etc/app:/etc/app:ro')
    mounts:
      - /etc/reference:/etc/reference

    # An hash of options to use in systemd unit file that overrides or extends the default ones which are:
    #   'Unit' => {
    #     'Description'   => pick(getvar('settings.description'),"${app} service"),
    #     'Documentation' => pick(getvar('settings.website'),"Search: ${app}"),
    #     'After'         => 'docker.service',
    #     'Requires'      => 'docker.service',
    #   },
    #   'Service' => {
    #     'ExecStart'    => "/usr/bin/docker run --rm --name ${app} ${docker_args} ${port_mapping} ${mount_mapping} ${docker_image}",
    #     'Restart'      => 'always',
    #     'RestartSec'   => '10s',
    #   },
    #   'Install' => {
    #     'WantedBy' => 'multi-user.target',
    #   },
    systemd_options: {}

    # A custom template to use for the contents of thesystemd unit file. The default is tp/inifile_with_stanzas.erb which automatically
    # maps systemd_options into a valid Systemd unit file in ini file format with stanza. You probably don't need to set this.
    systemd_template: 'tp/inifile_with_stanzas.erb'

  build:
    prerequisites:
      tp::install:
        - build-essential
    execs:
      configure:
        command: './configure'
      build:
        command: 'make'
      setup:
        command: 'make install'

  releases:
    baseurl: 'https://github.com/reference/reference/releases/download/'
    file_format: tar.gz
    latest:
      release_url: 'https://github.com/reference/reference/releases/download/reference-latest/reference-latest.tar.gz'
    version:
      release_url: 'https://github.com/reference/reference/releases/download/reference-$VERSION/reference-$VERSION.tar.gz'
